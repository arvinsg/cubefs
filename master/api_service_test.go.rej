diff a/master/api_service_test.go b/master/api_service_test.go	(rejected hunks)
@@ -242,7 +242,7 @@ func createDefaultMasterServerForTest() *Server {
 	vol, err := testServer.cluster.createVol(commonVolName, "cfs", testZone2, "", 3, 3, 3, 3, 100, 0, defaultEcDataNum, defaultEcParityNum, defaultEcEnable,
 		false, false, false, false, true, false, false, false, 0, 0, defaultChildFileMaxCount,
 		proto.StoreModeMem, proto.MetaPartitionLayout{0, 0}, []string{}, proto.CompactDefault, proto.DpFollowerReadDelayConfig{false, 0}, 0,
-		0, false, 0, 0, false)
+		0, false, 0, 0, false, false)
 	if err != nil {
 		panic(err)
 	}
@@ -1812,7 +1812,7 @@ func TestCreateVolForUpdateToCrossRegionVol(t *testing.T) {
 	process(reqURL, t)
 	// create a normal vol
 	err := mc.AdminAPI().CreateVolume(volName, "cfs", 3, 120, 200, 3, 3, 0, 1,
-		false, false, false, true, false, false, zoneName, "0,0", "", 0, "default", defaultEcDataNum, defaultEcParityNum, false, 0, 0, 0, false, false)
+		false, false, false, true, false, false, zoneName, "0,0", "", 0, "default", defaultEcDataNum, defaultEcParityNum, false, 0, 0, 0, false, false, false)
 	assert.NoErrorf(t, err, "CreateVolume err:%v", err)
 }
 
@@ -1822,7 +1822,7 @@ func TestUpdateVolToCrossRegionVol(t *testing.T) {
 	// update to cross region vol
 	err := mc.AdminAPI().UpdateVolume(volName, 200, 5, 0, 0, 1, false, false, false, false, false, false,
 		true, false, false, buildAuthKey("cfs"), newZoneName, "0,0", "", 0, 1, 120, "default", 0, 0, 0, 0, 0, exporter.UMPCollectMethodUnknown, -1, -1, false,
-		"", false, false, 0, false, readConntimeout, readConntimeout, 0, false)
+		"", false, false, 0, false, readConntimeout, readConntimeout, 0, false, false)
 	if !assert.NoErrorf(t, err, "UpdateVolume err:%v", err) {
 		return
 	}
@@ -2403,7 +2403,7 @@ func TestSmartVolRules(t *testing.T) {
 	defer log.LogFlush()
 	err = mc.AdminAPI().CreateVolume(volName, "cfs", 3, 120, 200, 3, 3, 3, int(proto.StoreModeMem),
 		false, false, false, true, true, false, testZone2, "", testSmartRules,
-		0, "default", defaultEcDataNum, defaultEcParityNum, false, 0, 0, 0, false, false)
+		0, "default", defaultEcDataNum, defaultEcParityNum, false, 0, 0, 0, false, false, false)
 	if !assert.NoErrorf(t, err, "CreateVolume err:%v", err) {
 		return
 	}
@@ -2509,7 +2509,7 @@ func TestGetTargetAddressForDataPartitionSmartTransferForOneZone(t *testing.T) {
 	defer log.LogFlush()
 	err = mc.AdminAPI().CreateVolume(volName, "cfs", 3, 120, 200, 3, 3, 3, int(proto.StoreModeMem),
 		false, false, false, true, true, false, testZone2, "", testSmartRules,
-		0, "default", defaultEcDataNum, defaultEcParityNum, false, 0, 0, 0, false, false)
+		0, "default", defaultEcDataNum, defaultEcParityNum, false, 0, 0, 0, false, false, false)
 	if !assert.NoError(t, err) {
 		return
 	}
@@ -2583,7 +2583,7 @@ func TestGetTargetAddressForDataPartitionSmartCase1(t *testing.T) {
 	defer log.LogFlush()
 	err = mc.AdminAPI().CreateVolume(volName, "cfs", 3, 120, 200, 3, 3, 0, int(proto.StoreModeMem),
 		false, false, false, true, true, false, testZone2, "", testSmartRules,
-		0, "default", defaultEcDataNum, defaultEcParityNum, false, 0, 0, 0, false, false)
+		0, "default", defaultEcDataNum, defaultEcParityNum, false, 0, 0, 0, false, false, false)
 	if err != nil {
 		t.Errorf("CreateVolume err:%v", err)
 		return
@@ -2664,7 +2664,7 @@ func TestGetTargetAddressForDataPartitionSmartCase2(t *testing.T) {
 	defer log.LogFlush()
 	err = mc.AdminAPI().CreateVolume(volName, "cfs", 3, 120, 200, 3, 3, 0, int(proto.StoreModeMem),
 		false, false, false, true, true, false, testZone2, "", testSmartRules,
-		0, "default", defaultEcDataNum, defaultEcParityNum, false, 0, 0, 0, false, false)
+		0, "default", defaultEcDataNum, defaultEcParityNum, false, 0, 0, 0, false, false, false)
 	if !assert.NoError(t, err) {
 		return
 	}
@@ -2757,7 +2757,7 @@ func TestGetTargetAddressForDataPartitionSmartCase3(t *testing.T) {
 	err = mc.AdminAPI().CreateVolume(volName, "cfs", 3, 120, 200, 3, 3, 0, int(proto.StoreModeMem),
 		false, false, false, true, true, false,
 		fmt.Sprintf("%v,%v", testZone1, testZone3), "", testSmartRules, 0, "default", defaultEcDataNum, defaultEcParityNum,
-		false, 0, 0, 0, false, false)
+		false, 0, 0, 0, false, false, false)
 	if !assert.NoError(t, err) {
 		return
 	}
@@ -2845,7 +2845,7 @@ func TestGetTargetAddressForDataPartitionSmartCase4(t *testing.T) {
 	err = mc.AdminAPI().CreateVolume(volName, "cfs", 3, 120, 200, 3, 3, 0, int(proto.StoreModeMem),
 		false, false, false, true, true, false,
 		fmt.Sprintf("%v,%v", testZone1, testZone3), "", testSmartRules, 0, "default", defaultEcDataNum, defaultEcParityNum,
-		false, 0, 0, 0, false, false)
+		false, 0, 0, 0, false, false, false)
 	if !assert.NoError(t, err) {
 		return
 	}
@@ -2949,7 +2949,7 @@ func TestGetTargetAddressForDataPartitionSmartCase5(t *testing.T) {
 	err = mc.AdminAPI().CreateVolume(volName, "cfs", 3, 120, 200, 3, 3, 0, int(proto.StoreModeMem),
 		false, false, false, true, true, false,
 		fmt.Sprintf("%v,%v", testZone2, testZone3), "", testSmartRules, 0, "default", defaultEcDataNum, defaultEcParityNum,
-		false, 0, 0, 0, false, false)
+		false, 0, 0, 0, false, false, false)
 	if !assert.NoError(t, err) {
 		return
 	}
@@ -3122,7 +3122,7 @@ func TestGetTargetAddressForDataPartitionSmartCase6(t *testing.T) {
 	err = mc.AdminAPI().CreateVolume(volName, "cfs", 3, 120, 200, 3, 3, 0, int(proto.StoreModeMem),
 		false, false, false, true, true, false,
 		fmt.Sprintf("%v,%v,%v", testZone1, testZone3, testZone7), "", testSmartRules, 0, "default", defaultEcDataNum, defaultEcParityNum,
-		false, 0, 0, 0, false, false)
+		false, 0, 0, 0, false, false, false)
 	if !assert.NoError(t, err) {
 		return
 	}
@@ -3282,7 +3282,7 @@ func TestGetTargetAddressForDataPartitionSmartCase7(t *testing.T) {
 	err = mc.AdminAPI().CreateVolume(volName, "cfs", 3, 120, 200, 5, 3, 0, int(proto.StoreModeMem),
 		false, false, false, true, true, false,
 		fmt.Sprintf("%v,%v,%v", testZone1, testZone9, testZone3), "", testSmartRules, 1, "default", defaultEcDataNum,
-		defaultEcParityNum, false, 0, 0, 0, false, false)
+		defaultEcParityNum, false, 0, 0, 0, false, false, false)
 	if !assert.NoError(t, err) {
 		return
 	}
@@ -3347,7 +3347,7 @@ func TestFreezeDataPartition(t *testing.T) {
 	defer log.LogFlush()
 	err = mc.AdminAPI().CreateVolume(volName, "cfs", 3, 120, 200, 3, 3, 0, int(proto.StoreModeMem),
 		false, false, false, true, true, false, testZone2, "", testSmartRules,
-		0, "default", defaultEcDataNum, defaultEcParityNum, false, 0, 0, 0, false, false)
+		0, "default", defaultEcDataNum, defaultEcParityNum, false, 0, 0, 0, false, false, false)
 	assertErrNilOtherwiseFailNow(t, err)
 	dps, err := mc.ClientAPI().GetDataPartitions(volName, nil)
 	assertErrNilOtherwiseFailNow(t, err)
@@ -4014,7 +4014,8 @@ func updateVolCacheConfig(volName, remoteCacheBoostPath string, remoteCacheBoost
 		readConntimeout,
 		readConntimeout,
 		0,
-		true)
+		true,
+		false)
 	if err != nil {
 		return
 	}
@@ -4085,7 +4086,7 @@ func TestGetHddDataPartitions(t *testing.T) {
 	defer log.LogFlush()
 	err = mc.AdminAPI().CreateVolume(volName, "cfs", 3, 120, 200, 3, 3, 0, int(proto.StoreModeMem),
 		false, false, false, true, true, false, testZone2, "", testSmartRules,
-		0, "default", defaultEcDataNum, defaultEcParityNum, false, 0, 0, 0, false, false)
+		0, "default", defaultEcDataNum, defaultEcParityNum, false, 0, 0, 0, false, false, false)
 	if err != nil {
 		t.Errorf("CreateVolume err:%v", err)
 		t.FailNow()
@@ -4170,7 +4171,7 @@ func TestNewTwoDpReplicaZone(t *testing.T) {
 	)
 	err = mc.AdminAPI().CreateVolume(volName, "cfs", 3, 120, 200, 2, 3, 0, 1,
 		false, false, false, true, false, false, testZone2, "0,0", "",
-		0, "default", defaultEcDataNum, defaultEcParityNum, false, 0, 0, 0, false, false)
+		0, "default", defaultEcDataNum, defaultEcParityNum, false, 0, 0, 0, false, false, false)
 	if !assert.NoErrorf(t, err, "CreateVolume err:%v", err) {
 		return
 	}
@@ -4191,7 +4192,7 @@ func TestDecommissionTwoDpReplicaZone(t *testing.T) {
 	)
 	err = mc.AdminAPI().CreateVolume(volName, "cfs", 3, 120, 200, 2, 3, 0, 1,
 		false, false, false, true, false, false, testZone2, "0,0", "",
-		0, "default", defaultEcDataNum, defaultEcParityNum, false, 0, 0, 0, false, false)
+		0, "default", defaultEcDataNum, defaultEcParityNum, false, 0, 0, 0, false, false, false)
 	if !assert.NoErrorf(t, err, "CreateVolume err:%v", err) {
 		return
 	}
@@ -4631,7 +4632,6 @@ func TestVolNetConnConfig(t *testing.T) {
 	commonVol.ConnConfig = oldConnConfig
 }
 
-
 func TestSetUnrecoverableDuration(t *testing.T) {
 	hours := int64(30)
 	reqURL := fmt.Sprintf("%v%v?hours=%v", hostAddr, proto.AdminAPISetUnrecoverableDuration, hours)
@@ -4668,7 +4668,7 @@ func TestSetRDMAConfSwitchForNode(t *testing.T) {
 	if !assert.NoError(t, err) {
 		return
 	}
-	nodeTypes := []string{proto.NodeTypeDataNode,  proto.NodeTypeMetaNode}
+	nodeTypes := []string{proto.NodeTypeDataNode, proto.NodeTypeMetaNode}
 	rdmaServiceValues := []string{"1", "t", "T", "true", "TRUE", "True", "0", "f", "F", "false", "FALSE", "False"}
 	rdmaSendValues := rdmaServiceValues
 	rdmaRecvValues := rdmaServiceValues
@@ -4760,7 +4760,7 @@ func TestSetRDMAConfPodForNode(t *testing.T) {
 	if !assert.NoError(t, err) {
 		return
 	}
-	nodeTypes := []string{proto.NodeTypeDataNode,  proto.NodeTypeMetaNode}
+	nodeTypes := []string{proto.NodeTypeDataNode, proto.NodeTypeMetaNode}
 	podNames := []string{"POD01", "POD02", "POD03"}
 	for _, nodeType := range nodeTypes {
 		var (
@@ -4795,9 +4795,9 @@ func TestSetRDMAConfPodForNode(t *testing.T) {
 
 func TestSetRDMAConfForCluster(t *testing.T) {
 	combinationParams := [][]interface{}{
-		{true,  true,  int64(100)},
-		{true,  false, int64(200)},
-		{false, true,  int64(300)},
+		{true, true, int64(100)},
+		{true, false, int64(200)},
+		{false, true, int64(300)},
 		{false, false, int64(400)},
 	}
 	for _, param := range combinationParams {
@@ -4808,3 +4808,102 @@ func TestSetRDMAConfForCluster(t *testing.T) {
 		assert.Equalf(t, param[2], server.cluster.cfg.RDMAReConnDelayTime, "cluster rdmaReConnDelayTime expect:%v actual:%v", param[2], server.cluster.cfg.RDMAReConnDelayTime)
 	}
 }
+
+func TestCreateAndUpdateVolWithMetaOutFlag(t *testing.T) {
+	// check metaOut value of initial vol
+	existvol, err := server.cluster.getVol(commonVolName)
+	if !assert.NoError(t, err) {
+		return
+	}
+	if !assert.Falsef(t, existvol.MetaOut, "expect vol.MetaOut to be true, but is %v", existvol.MetaOut) {
+		return
+	}
+
+	name := "test_jss_vol"
+	metaOut := true
+	// check create vol with metaOut=true
+	reqURL := fmt.Sprintf("%v%v?name=%v&replicas=3&type=extent&capacity=100&owner=cfstest&zoneName=%v&metaOut=%v", hostAddr, proto.AdminCreateVol, name, testZone2, metaOut)
+	process(reqURL, t)
+	vol, err := server.cluster.getVol(name)
+	if !assert.NoError(t, err) {
+		return
+	}
+	if !assert.Truef(t, vol.MetaOut, "expect vol.MetaOut to be true, but is %v", vol.MetaOut) {
+		return
+	}
+
+	// check /admin/getVol(simpleVol) info
+	simpleVol1, err := mc.AdminAPI().GetVolumeSimpleInfo(name)
+	if !assert.NoError(t, err) {
+		return
+	}
+	if !assert.Truef(t, simpleVol1.MetaOut, "expect vol.MetaOut to be true, but is %v", simpleVol1.MetaOut) {
+		return
+	}
+
+	// check persist vol info
+	persistVols, err := server.cluster.fsm.store.SeekForPrefix([]byte(volPrefix))
+	if !assert.NoError(t, err) {
+		return
+	}
+	for _, pVol := range persistVols {
+		var vv *volValue
+		if vv, err = newVolValueFromBytes(pVol); err != nil {
+			err = fmt.Errorf("action[loadVols],value:%v,unmarshal err:%v", string(pVol), err)
+			return
+		}
+		if vv.Name == name {
+			checkVol := newVolFromVolValue(vv)
+			if !assert.Truef(t, checkVol.MetaOut, "expect vol.MetaOut to be true, but is %v", vol.MetaOut) {
+				return
+			}
+		}
+	}
+
+	// check /admin/getVol(simpleVol) info
+	simpleVol, err := mc.AdminAPI().GetVolumeSimpleInfo(name)
+	if !assert.NoError(t, err) {
+		return
+	}
+	if !assert.Truef(t, simpleVol.MetaOut, "expect vol.MetaOut to be true, but is %v", simpleVol.MetaOut) {
+		return
+	}
+
+	//check update metaOut
+	metaOut = false
+	reqURL = fmt.Sprintf("%v%v?name=%v&metaOut=%v&authKey=%v",
+		hostAddr, proto.AdminUpdateVol, name, metaOut, buildAuthKey("cfstest"))
+	process(reqURL, t)
+	vol, err = server.cluster.getVol(name)
+	if !assert.NoError(t, err) {
+		return
+	}
+	if !assert.Falsef(t, vol.MetaOut, "expect vol.MetaOut to be false, but is %v", vol.MetaOut) {
+		return
+	}
+
+	// check persist vol info
+	persistVols, err = server.cluster.fsm.store.SeekForPrefix([]byte(volPrefix))
+	if !assert.NoError(t, err) {
+		return
+	}
+	for _, pVol := range persistVols {
+		var vv *volValue
+		if vv, err = newVolValueFromBytes(pVol); err != nil {
+			err = fmt.Errorf("action[loadVols],value:%v,unmarshal err:%v", string(pVol), err)
+			return
+		}
+		if vv.Name == name {
+			checkVol := newVolFromVolValue(vv)
+			if !assert.Falsef(t, checkVol.MetaOut, "expect vol.MetaOut to be true, but is %v", vol.MetaOut) {
+				return
+			}
+		}
+	}
+
+	// del this test vol
+	err = mc.AdminAPI().DeleteVolume(name, buildAuthKey("cfstest"))
+	if !assert.NoError(t, err) {
+		return
+	}
+}
