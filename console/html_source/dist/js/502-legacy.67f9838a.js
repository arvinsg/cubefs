"use strict";(self["webpackJsonp_cfs-console"]=self["webpackJsonp_cfs-console"]||[]).push([[502],{73586:function(n,e,t){var a,r,s,i,o,d,l,u,c,$,m,p,g,S,D,h,v,P,N,b,Z,L,R,M,f,C,z,y,F,A,_,T,G,I,q,x,k,E,w,V,W,U,O,J,j,B=t(2106),H=t(4969),K={queryExpandAll:(0,H.ZP)(a||(a=(0,B.Z)(["\n    query {\n      clusterView {\n        name\n        volumeCount\n      }\n      dataNodeList {\n        addr\n      }\n      metaNodeList {\n        addr\n      }\n      masterList {\n        addr\n      }\n    }\n  "]))),rdmaNodeView:(0,H.ZP)(r||(r=(0,B.Z)(["\n    query rdmaNodeView($cluster: String, $addr: String) {\n      rdmaNodeView(cluster: $cluster, addr: $addr) {\n        nodeRDMAConf {\n          slaveName\n          fWVersion\n          driverVersion\n          vendor\n        }\n        nodeRDMAStatus {\n          pod\n          clusterRDMAEnable\n          clusterRDMASend\n          nodeRDMAService\n          nodeRDMASend\n          nodeRDMARecv\n          enableSend\n          nodeCount\n          permanentClosedCount\n        }\n        connNodes {\n          addr\n          enableConn\n          permanentClosed\n          errConnCount\n          reConnTime\n        }\n      }\n    }\n  "]))),flashGroupList:(0,H.ZP)(s||(s=(0,B.Z)(["\n    query flashGroupList($cluster: String, $page: int32, $pageSize: int32) {\n      flashGroupList(cluster: $cluster, page: $page, pageSize: $pageSize) {\n        total\n        data {\n          iD\n          status\n          flashNodeCount\n        }\n      }\n    }\n  "]))),getFlashGroup:(0,H.ZP)(i||(i=(0,B.Z)(["\n    query getFlashGroup($cluster: String, $iD: int32) {\n      getFlashGroup(cluster: $cluster, iD: $iD) {\n        host\n        zone {\n          zoneName\n          nodeNumber\n        }\n      }\n    }\n  "]))),zoneList:(0,H.ZP)(o||(o=(0,B.Z)(["\n    query zoneList($cluster: String) {\n      zoneList(cluster: $cluster)\n    }\n  "]))),createFlashGroup:(0,H.ZP)(d||(d=(0,B.Z)(["\n    mutation createFlashGroup($cluster: String) {\n      createFlashGroup(cluster: $cluster) {\n        iD\n      }\n    }\n  "]))),updateFlashGroup:(0,H.ZP)(l||(l=(0,B.Z)(["\n    mutation updateFlashGroup(\n      $cluster: String\n      $iD: int32\n      $isActive: bool\n      $isAddNode: bool\n      $level: int\n      $addr: String\n      $zone: String\n      $count: int\n    ) {\n      updateFlashGroup(\n        cluster: $cluster\n        iD: $iD\n        isActive: $isActive\n        isAddNode: $isAddNode\n        level: $level\n        addr: $addr\n        zone: $zone\n        count: $count\n      )\n    }\n  "]))),removeFlashGroup:(0,H.ZP)(u||(u=(0,B.Z)(["\n    mutation removeFlashGroup($cluster: String, $iD: int32) {\n      removeFlashGroup(cluster: $cluster, iD: $iD)\n    }\n  "]))),masterList:(0,H.ZP)(c||(c=(0,B.Z)(["\n    query masterList($cluster: String, $page: int32, $pageSize: int32) {\n      masterList(cluster: $cluster, page: $page, pageSize: $pageSize) {\n        total\n        data {\n          addr\n          isLeader\n        }\n      }\n    }\n  "]))),metaNodeList:(0,H.ZP)($||($=(0,B.Z)(["\n    query metaNodeList(\n      $cluster: String\n      $zone: String\n      $addr: String\n      $page: int32\n      $pageSize: int32\n    ) {\n      metaNodeList(\n        cluster: $cluster\n        zone: $zone\n        addr: $addr\n        page: $page\n        pageSize: $pageSize\n      ) {\n        total\n        data {\n          iD\n          addr\n          zoneName\n          isActive\n          isWritable\n          total\n          available\n          used\n          usageRatio\n          partitionCount\n          reportTime\n          isRDMA\n          pod\n          nodeRDMAService\n          nodeRDMASend\n          nodeRDMARecv\n        }\n      }\n    }\n  "]))),dataNodeList:(0,H.ZP)(m||(m=(0,B.Z)(["\n    query dataNodeList(\n      $cluster: String\n      $zone: String\n      $addr: String\n      $page: int32\n      $pageSize: int32\n    ) {\n      dataNodeList(\n        cluster: $cluster\n        zone: $zone\n        addr: $addr\n        page: $page\n        pageSize: $pageSize\n      ) {\n        total\n        data {\n          iD\n          addr\n          zoneName\n          isActive\n          isWritable\n          total\n          available\n          disk\n          used\n          usageRatio\n          partitionCount\n          reportTime\n          isRDMA\n          pod\n          nodeRDMAService\n          nodeRDMASend\n          nodeRDMARecv\n        }\n      }\n    }\n  "]))),flashNodeList:(0,H.ZP)(p||(p=(0,B.Z)(["\n    query flashNodeList(\n      $cluster: String\n      $addr: String\n      $fgID: int\n      $page: int32\n      $pageSize: int32\n    ) {\n      flashNodeList(\n        cluster: $cluster\n        addr: $addr\n        fgID: $fgID\n        page: $page\n        pageSize: $pageSize\n      ) {\n        total\n        data {\n          iD\n          addr\n          zoneName\n          isActive\n          reportTime\n          flashGroupID\n          isEnable\n          nodeLimit\n          hitRate\n          evicts\n        }\n      }\n    }\n  "]))),queryMetaList:(0,H.ZP)(g||(g=(0,B.Z)(["\n    query {\n      clusterView {\n        name #cluster\n        metaNodes {\n          addr # serverIP\n          status # status\n          iD\n          toMetaNode {\n            zoneName # idc\n            metaPartitionCount\n            used\n            total\n            ratio\n            reportTime\n            isActive\n          }\n        }\n      }\n    }\n  "]))),queryDataList:(0,H.ZP)(S||(S=(0,B.Z)(["\n    query {\n      clusterView {\n        name #cluster\n        dataNodes {\n          addr # serverIP\n          status # status\n          iD\n          toDataNode {\n            zoneName # idc\n            dataPartitionCount\n            used\n            total\n            usageRatio\n            reportTime\n            isActive\n          }\n        }\n      }\n    }\n  "]))),updateFlashNode:(0,H.ZP)(D||(D=(0,B.Z)(["\n    mutation updateFlashNode($cluster: String, $addr: String, $isEnable: bool) {\n      updateFlashNode(cluster: $cluster, addr: $addr, isEnable: $isEnable)\n    }\n  "]))),setConnEnable:(0,H.ZP)(h||(h=(0,B.Z)(["\n    mutation setConnEnable(\n      $cluster: String\n      $addr: String\n      $addrList: list\n      $enableConn: bool\n      $reason: String\n      $nodeType: String\n    ) {\n      setConnEnable(\n        cluster: $cluster\n        addr: $addr\n        addrList: $addrList\n        reason: $reason\n        enableConn: $enableConn\n        nodeType: $nodeType\n      )\n    }\n  "]))),setSendEnable:(0,H.ZP)(v||(v=(0,B.Z)(["\n    mutation setSendEnable(\n      $cluster: String\n      $addr: String\n      $enableSend: bool\n      $reason: String\n      $nodeType: String\n    ) {\n      setSendEnable(\n        cluster: $cluster\n        addr: $addr\n        reason: $reason\n        enableSend: $enableSend\n        nodeType: $nodeType\n      )\n    }\n  "]))),setNodeRdmaConf:(0,H.ZP)(P||(P=(0,B.Z)(["\n    mutation setNodeRdmaConf(\n      $cluster: String\n      $addr: String\n      $pod: String\n      $nodeRDMAService: bool\n      $nodeRDMASend: bool\n      $nodeRDMARecv: bool\n      $nodeType: String\n    ) {\n      setNodeRdmaConf(\n        cluster: $cluster\n        addr: $addr\n        pod: $pod\n        nodeRDMAService: $nodeRDMAService\n        nodeRDMASend: $nodeRDMASend\n        nodeRDMARecv: $nodeRDMARecv\n        nodeType: $nodeType\n      )\n    }\n  "]))),setPingSortFlashNode:(0,H.ZP)(N||(N=(0,B.Z)(["\n    mutation setPingSortFlashNode(\n      $cluster: String\n      $addr: String\n      $state: bool\n    ) {\n      setPingSortFlashNode(cluster: $cluster, addr: $addr, state: $state)\n    }\n  "]))),setStackReadFlashNode:(0,H.ZP)(b||(b=(0,B.Z)(["\n    mutation setStackReadFlashNode(\n      $cluster: String\n      $addr: String\n      $state: bool\n    ) {\n      setStackReadFlashNode(cluster: $cluster, addr: $addr, state: $state)\n    }\n  "]))),setTimeoutFlashNode:(0,H.ZP)(Z||(Z=(0,B.Z)(["\n    mutation setTimeoutFlashNode(\n      $cluster: String\n      $addr: String\n      $timeoutMs: int\n    ) {\n      setTimeoutFlashNode(cluster: $cluster, addr: $addr, timeoutMs: $timeoutMs)\n    }\n  "]))),evictCacheFlashNode:(0,H.ZP)(L||(L=(0,B.Z)(["\n    mutation evictCacheFlashNode(\n      $cluster: String\n      $addr: String\n      $level: int\n      $volume: String\n      $inode: int\n    ) {\n      evictCacheFlashNode(\n        cluster: $cluster\n        addr: $addr\n        level: $level\n        volume: $volume\n        inode: $inode\n      )\n    }\n  "]))),decommissionMetaNode:(0,H.ZP)(R||(R=(0,B.Z)(["\n    mutation decommissionMetaNode($cluster: String, $addr: String) {\n      decommissionMetaNode(cluster: $cluster, addr: $addr) {\n        code\n        message\n      }\n    }\n  "]))),decommissionFlashNode:(0,H.ZP)(M||(M=(0,B.Z)(["\n    mutation decommissionFlashNode($cluster: String, $addr: String) {\n      decommissionFlashNode(cluster: $cluster, addr: $addr) {\n        code\n        message\n      }\n    }\n  "]))),decommissionDataNode:(0,H.ZP)(f||(f=(0,B.Z)(["\n    mutation decommissionDataNode($cluster: String, $addr: String) {\n      decommissionDataNode(cluster: $cluster, addr: $addr) {\n        code\n        message\n      }\n    }\n  "]))),decommissionDisk:(0,H.ZP)(C||(C=(0,B.Z)(["\n    mutation decommissionDisk(\n      $cluster: String\n      $addr: String\n      $diskPath: String\n    ) {\n      decommissionDisk(cluster: $cluster, addr: $addr, diskPath: $diskPath) {\n        code\n        message\n      }\n    }\n  "]))),decommissionMetaPartition:(0,H.ZP)(z||(z=(0,B.Z)(["\n    mutation decommissionMetaPartition(\n      $cluster: String\n      $addr: String\n      $volName: String\n      $destAddr: String\n      $iD: int32\n    ) {\n      decommissionMetaPartition(\n        cluster: $cluster\n        addr: $addr\n        volName: $volName\n        destAddr: $destAddr\n        iD: $iD\n      ) {\n        code\n        message\n      }\n    }\n  "]))),decommissionDataPartition:(0,H.ZP)(y||(y=(0,B.Z)(["\n    mutation decommissionDataPartition(\n      $cluster: String\n      $addr: String\n      $volName: String\n      $destAddr: String\n      $iD: int32\n    ) {\n      decommissionDataPartition(\n        cluster: $cluster\n        addr: $addr\n        volName: $volName\n        destAddr: $destAddr\n        iD: $iD\n      ) {\n        code\n        message\n      }\n    }\n  "]))),promoteMetaLearner:(0,H.ZP)(F||(F=(0,B.Z)(["\n    mutation promoteMetaLearner($cluster: String, $addr: String, $iD: int32) {\n      promoteMetaLearner(cluster: $cluster, addr: $addr, iD: $iD) {\n        code\n        message\n      }\n    }\n  "]))),deleteMetaReplica:(0,H.ZP)(A||(A=(0,B.Z)(["\n    mutation deleteMetaReplica($cluster: String, $addr: String, $iD: int32) {\n      deleteMetaReplica(cluster: $cluster, addr: $addr, iD: $iD) {\n        code\n        message\n      }\n    }\n  "]))),deleteDataReplica:(0,H.ZP)(_||(_=(0,B.Z)(["\n    mutation deleteDataReplica($cluster: String, $addr: String, $iD: int32) {\n      deleteDataReplica(cluster: $cluster, addr: $addr, iD: $iD) {\n        code\n        message\n      }\n    }\n  "]))),promoteDataLearner:(0,H.ZP)(T||(T=(0,B.Z)(["\n    mutation promoteDataLearner($cluster: String, $addr: String, $iD: int32) {\n      promoteDataLearner(cluster: $cluster, addr: $addr, iD: $iD) {\n        code\n        message\n      }\n    }\n  "]))),addMetaReplica:(0,H.ZP)(G||(G=(0,B.Z)(["\n    mutation addMetaReplica(\n      $cluster: String\n      $addr: String\n      $iD: int32\n      $storeMode: int32\n    ) {\n      addMetaReplica(\n        cluster: $cluster\n        addr: $addr\n        iD: $iD\n        storeMode: $storeMode\n      ) {\n        code\n        message\n      }\n    }\n  "]))),addDataReplica:(0,H.ZP)(I||(I=(0,B.Z)(["\n    mutation addDataReplica(\n      $cluster: String\n      $addr: String\n      $iD: int32\n      $replicaType: int32\n    ) {\n      addDataReplica(\n        cluster: $cluster\n        addr: $addr\n        iD: $iD\n        replicaType: $replicaType\n      ) {\n        code\n        message\n      }\n    }\n  "]))),addMetaLearner:(0,H.ZP)(q||(q=(0,B.Z)(["\n    mutation addMetaLearner(\n      $cluster: String\n      $addr: String\n      $iD: int32\n      $storeMode: int32\n      $autoPromote: bool\n      $threshold: int32\n    ) {\n      addMetaLearner(\n        cluster: $cluster\n        addr: $addr\n        iD: $iD\n        storeMode: $storeMode\n        autoPromote: $autoPromote\n        threshold: $threshold\n      ) {\n        code\n        message\n      }\n    }\n  "]))),addDataLearner:(0,H.ZP)(x||(x=(0,B.Z)(["\n    mutation addDataLearner(\n      $cluster: String\n      $addr: String\n      $iD: int32\n      $storeMode: int32\n      $autoPromote: bool\n      $threshold: int32\n    ) {\n      addDataLearner(\n        cluster: $cluster\n        addr: $addr\n        iD: $iD\n        storeMode: $storeMode\n        autoPromote: $autoPromote\n        threshold: $threshold\n      ) {\n        code\n        message\n      }\n    }\n  "]))),reloadMetaPartition:(0,H.ZP)(k||(k=(0,B.Z)(["\n    mutation reloadMetaPartition(\n      $cluster: String\n      $addr: String\n      $iD: int32\n      $volName: String\n    ) {\n      reloadMetaPartition(\n        cluster: $cluster\n        addr: $addr\n        iD: $iD\n        volName: $volName\n      ) {\n        code\n        message\n      }\n    }\n  "]))),reloadDataPartition:(0,H.ZP)(E||(E=(0,B.Z)(["\n    mutation reloadDataPartition(\n      $cluster: String\n      $addr: String\n      $iD: int32\n      $volName: String\n    ) {\n      reloadDataPartition(\n        cluster: $cluster\n        addr: $addr\n        iD: $iD\n        volName: $volName\n      ) {\n        code\n        message\n      }\n    }\n  "]))),resetMetaPartition:(0,H.ZP)(w||(w=(0,B.Z)(["\n    mutation resetMetaPartition($cluster: String, $addrs: String, $iD: int32) {\n      resetMetaPartition(cluster: $cluster, addrs: $addrs, iD: $iD) {\n        code\n        message\n      }\n    }\n  "]))),resetDataPartition:(0,H.ZP)(V||(V=(0,B.Z)(["\n    mutation resetDataPartition($cluster: String, $addrs: String, $iD: int32) {\n      resetDataPartition(cluster: $cluster, addrs: $addrs, iD: $iD) {\n        code\n        message\n      }\n    }\n  "]))),dataPartitionList:(0,H.ZP)(W||(W=(0,B.Z)(["\n    query dataPartitionList(\n      $cluster: String\n      $addr: String\n      $iD: int32\n      $page: int32\n      $pageSize: int32\n    ) {\n      dataPartitionList(\n        cluster: $cluster\n        addr: $addr\n        iD: $iD\n        page: $page\n        pageSize: $pageSize\n      ) {\n        total\n        data {\n          partitionID\n          replicas {\n            addr\n            status\n            zone\n            isLeader\n            isLearner\n            fileCount\n            total\n            needCompare\n            used\n            mType\n            diskPath\n          }\n          volName\n          extentCount\n          inodeCount\n          maxExistIno\n          status\n          isRecover\n          createTime\n          lastLoadTime\n        }\n      }\n    }\n  "]))),metaPartitionList:(0,H.ZP)(U||(U=(0,B.Z)(["\n    query metaPartitionList(\n      $cluster: String\n      $addr: String\n      $iD: int32\n      $page: int32\n      $pageSize: int32\n    ) {\n      metaPartitionList(\n        cluster: $cluster\n        addr: $addr\n        iD: $iD\n        page: $page\n        pageSize: $pageSize\n      ) {\n        total\n        data {\n          partitionID\n          replicas {\n            addr\n            status\n            isLeader\n            isLearner\n            storeMode\n            isRecover\n            applyId\n            reportTime\n          }\n          volName\n          start\n          end\n          inodeCount\n          dentryCount\n          maxExistIno\n          status\n          isRecover\n          createTime\n          lastLoadTime\n        }\n      }\n    }\n  "]))),dataNodeGet:(0,H.ZP)(O||(O=(0,B.Z)(["\n    query DataNodeGet($cluster: String, $addr: String) {\n      dataNodeGet(cluster: $cluster, addr: $addr) {\n        dataPartitionReports {\n          diskPath\n          extentCount\n          isLeader\n          needCompare\n          partitionID\n          partitionStatus\n          total\n          used\n          volName\n        }\n      }\n    }\n  "]))),metaNodeGet:(0,H.ZP)(J||(J=(0,B.Z)(["\n    query MetaNodeGet($cluster: String, $addr: String) {\n      metaNodeGet(cluster: $cluster, addr: $addr) {\n        metaPartitionInfos {\n          end\n          isLeader\n          maxInodeID\n          partitionID\n          start\n          status\n          volName\n        }\n      }\n    }\n  "]))),queryServerList:(0,H.ZP)(j||(j=(0,B.Z)(["\n    query {\n      clusterView {\n        name #cluster\n        dataNodes {\n          addr # serverIP\n          status # status\n          iD\n          toDataNode {\n            zoneName # idc\n            dataPartitionCount\n            used\n            total\n            usageRatio\n            reportTime\n          }\n        }\n      }\n    }\n  "])))};e.Z=K},99502:function(n,e,t){t.r(e),t.d(e,{default:function(){return u}});var a=function(){var n=this,e=n._self._c;return e("div",[e("crumb",{attrs:{crumbInfo:n.crumbInfo}}),n._v(" "),e("div",{staticClass:"cluster alarm"},["data"===n.h3Txt?e("span",[n._v(n._s(n.$t("chubaoFS.servers.Datanode")))]):e("span",[n._v(n._s(n.$t("chubaoFS.servers.Matanode")))]),n._v("\n    "+n._s(n.$t("chubaoFS.servers.PartitionList"))+"\n    "),e("div",{directives:[{name:"loading",rawName:"v-loading",value:n.resData.loading,expression:"resData.loading"}],staticClass:"data-block"},["data"===n.h3Txt?e("el-table",{staticClass:"mt20",staticStyle:{width:"100%"},attrs:{data:n.resData.resLists}},[e("el-table-column",{attrs:{prop:"partitionID",label:n.$t("chubaoFS.servers.PartitionID")}}),n._v(" "),e("el-table-column",{attrs:{prop:"volName",label:n.$t("chubaoFS.servers.Volume")}}),n._v(" "),e("el-table-column",{attrs:{prop:"total",label:n.$t("chubaoFS.servers.Total")}}),n._v(" "),e("el-table-column",{attrs:{prop:"used",label:n.$t("chubaoFS.servers.Used")}}),n._v(" "),e("el-table-column",{attrs:{prop:"status",label:n.$t("chubaoFS.servers.Status")}}),n._v(" "),e("el-table-column",{attrs:{prop:"diskPath",label:n.$t("chubaoFS.servers.DiskPath")}}),n._v(" "),e("el-table-column",{attrs:{prop:"isLeader",label:n.$t("chubaoFS.servers.Leader")},scopedSlots:n._u([{key:"default",fn:function(t){return[e("div",[n._v(n._s(t.row.isLeader))])]}}],null,!1,2025729776)}),n._v(" "),e("el-table-column",{attrs:{prop:"extentCount",label:n.$t("chubaoFS.servers.ExtentCount")}}),n._v(" "),e("el-table-column",{attrs:{prop:"needCompare",label:n.$t("chubaoFS.servers.NeedCompare")},scopedSlots:n._u([{key:"default",fn:function(t){return[e("div",[n._v(n._s(t.row.needCompare))])]}}],null,!1,631425820)})],1):e("el-table",{staticClass:"mt20",staticStyle:{width:"100%"},attrs:{data:n.resData.resLists}},[e("el-table-column",{attrs:{prop:"partitionID",label:n.$t("chubaoFS.servers.PartitionID")}}),n._v(" "),e("el-table-column",{attrs:{prop:"volName",label:n.$t("chubaoFS.servers.Volume")}}),n._v(" "),e("el-table-column",{attrs:{prop:"start",label:n.$t("chubaoFS.servers.Start")}}),n._v(" "),e("el-table-column",{attrs:{prop:"end",label:n.$t("chubaoFS.servers.End")}}),n._v(" "),e("el-table-column",{attrs:{prop:"status",label:n.$t("chubaoFS.servers.Status")}}),n._v(" "),e("el-table-column",{attrs:{prop:"isLeader",label:n.$t("chubaoFS.servers.Leader")},scopedSlots:n._u([{key:"default",fn:function(t){return[e("div",[n._v(n._s(t.row.isLeader))])]}}])})],1),n._v(" "),e("div",{staticClass:"clearfix mt20"},[e("el-pagination",{staticClass:"fr",attrs:{"page-sizes":n.resData.page.pageSizes,"page-size":n.resData.page.pageSize,layout:"sizes, prev, pager, next",total:n.resData.page.totalRecord},on:{"size-change":n.handleSizeChange,"current-change":n.handleCurrentChange}}),n._v(" "),e("span",{staticClass:"fr page-tips pr10"},[n._v(n._s(n.$t("chubaoFS.commonTxt.eachPageShows")))])],1)],1)])],1)},r=[],s=(t(89730),t(60228),t(47522),t(73586)),i={name:"alarm",data:function(){return{resData:{loading:!0,page:{pageSizes:[10,20,30,40],pageNo:1,pageSize:10,totalRecord:0,totalPage:1},resLists:[]},typeVal:"",typeList:["Meta Partition List"],ip:"",h3Txt:""}},computed:{crumbInfo:function(){return this.ip}},methods:{handleSizeChange:function(n){this.resData.page.pageSize=n,this.resData.page.pageNo=1,this.handleCurrentChange(1)},handleCurrentChange:function(n){this.resData.page.pageNo=n;var e=(n-1)*this.resData.page.pageSize,t=n*this.resData.page.pageSize;this.resData.resLists=this.storageLists.slice(e,t)},queryList:function(){var n=this,e=this;e.resData.loading=!0;var t={addr:this.ip},a="data"===this.h3Txt?"dataNodeGet":"metaNodeGet";this.apollo.query(this.url.consoleCluster,s.Z[a],t).then((function(t){if(e.resData.loading=!1,t){var a=t.data;"data"===n.h3Txt?(n.storageLists=a.dataNodeGet.dataPartitionReports,n.resData.page.totalRecord=a.dataNodeGet.dataPartitionReports.length,a.dataNodeGet.dataPartitionReports.forEach((function(n){n.status=1==n.partitionStatus?"ReadOnly":2==n.partitionStatus?"ReadWrite":"Unavailable",console.log(1==n.partitionStatus?"ReadOnly":2==n.partitionStatus?"ReadWrite":"Unavailable")}))):(n.storageLists=a.metaNodeGet.metaPartitionInfos,n.resData.page.totalRecord=a.metaNodeGet.metaPartitionInfos.length,a.metaNodeGet.metaPartitionInfos.forEach((function(n){n.status=1==n.status?"ReadOnly":2==n.status?"ReadWrite":"Unavailable"}))),n.handleCurrentChange(1)}})).catch((function(n){e.resData.loading=!1,console.log(n)}))}},mounted:function(){var n=this.$route.query;this.ip=n.ip,this.h3Txt=n.type,this.queryList()}},o=i,d=t(1001),l=(0,d.Z)(o,a,r,!1,null,"1d1ec48e",null),u=l.exports}}]);