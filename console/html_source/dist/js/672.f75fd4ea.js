"use strict";(self["webpackJsonp_cfs-console"]=self["webpackJsonp_cfs-console"]||[]).push([[672],{73586:function(n,t,e){var a,r,i,d,s,o,l,u,c,$,m,g,p,h,S,v,f,D,P,N,Z,y,L,b,x,M,C,z,A,F,R,E,T,q,k,G,w,I,_,V,j=e(2106),O=e(4969),B={queryExpandAll:(0,O.ZP)(a||(a=(0,j.Z)(["\n    query {\n      clusterView {\n        name\n        volumeCount\n      }\n      dataNodeList {\n        addr\n      }\n      metaNodeList {\n        addr\n      }\n      masterList {\n        addr\n      }\n    }\n  "]))),flashGroupList:(0,O.ZP)(r||(r=(0,j.Z)(["\n    query flashGroupList($cluster: String, $page: int32, $pageSize: int32) {\n      flashGroupList(cluster: $cluster, page: $page, pageSize: $pageSize) {\n        total\n        data {\n          iD\n          status\n          flashNodeCount\n        }\n      }\n    }\n  "]))),getFlashGroup:(0,O.ZP)(i||(i=(0,j.Z)(["\n    query getFlashGroup($cluster: String, $iD: int32) {\n      getFlashGroup(cluster: $cluster, iD: $iD) {\n        host\n        zone {\n          zoneName\n          nodeNumber\n        }\n      }\n    }\n  "]))),createFlashGroup:(0,O.ZP)(d||(d=(0,j.Z)(["\n    mutation createFlashGroup($cluster: String) {\n      setPingSortFlashNode(cluster: $cluster) {\n        iD\n      }\n    }\n  "]))),updateFlashGroup:(0,O.ZP)(s||(s=(0,j.Z)(["\n    mutation updateFlashGroup(\n      $cluster: String\n      $iD: int32\n      $isActive: bool\n      $isAddNode: bool\n      $level: int\n      $addr: String\n      $zone: String\n      $count: int\n    ) {\n      updateFlashGroup(\n        cluster: $cluster\n        iD: $iD\n        isActive: $isActive\n        isAddNode: $isAddNode\n        level: $level\n        addr: $addr\n        zone: $zone\n        count: $count\n      )\n    }\n  "]))),removeFlashGroup:(0,O.ZP)(o||(o=(0,j.Z)(["\n    mutation removeFlashGroup($cluster: String, $iD: int32) {\n      removeFlashGroup(cluster: $cluster, iD: $iD)\n    }\n  "]))),masterList:(0,O.ZP)(l||(l=(0,j.Z)(["\n    query masterList($cluster: String, $page: int32, $pageSize: int32) {\n      masterList(cluster: $cluster, page: $page, pageSize: $pageSize) {\n        total\n        data {\n          addr\n          isLeader\n        }\n      }\n    }\n  "]))),metaNodeList:(0,O.ZP)(u||(u=(0,j.Z)(["\n    query metaNodeList(\n      $cluster: String\n      $addr: String\n      $page: int32\n      $pageSize: int32\n    ) {\n      metaNodeList(\n        cluster: $cluster\n        addr: $addr\n        page: $page\n        pageSize: $pageSize\n      ) {\n        total\n        data {\n          iD\n          addr\n          zoneName\n          isActive\n          isWritable\n          total\n          available\n          used\n          usageRatio\n          partitionCount\n          reportTime\n        }\n      }\n    }\n  "]))),dataNodeList:(0,O.ZP)(c||(c=(0,j.Z)(["\n    query dataNodeList(\n      $cluster: String\n      $addr: String\n      $page: int32\n      $pageSize: int32\n    ) {\n      dataNodeList(\n        cluster: $cluster\n        addr: $addr\n        page: $page\n        pageSize: $pageSize\n      ) {\n        total\n        data {\n          iD\n          addr\n          zoneName\n          isActive\n          isWritable\n          total\n          available\n          disk\n          used\n          usageRatio\n          partitionCount\n          reportTime\n        }\n      }\n    }\n  "]))),flashNodeList:(0,O.ZP)($||($=(0,j.Z)(["\n    query flashNodeList(\n      $cluster: String\n      $addr: String\n      $fgID: int\n      $page: int32\n      $pageSize: int32\n    ) {\n      flashNodeList(\n        cluster: $cluster\n        addr: $addr\n        fgID: $fgID\n        page: $page\n        pageSize: $pageSize\n      ) {\n        total\n        data {\n          iD\n          addr\n          zoneName\n          isActive\n          reportTime\n          flashGroupID\n          isEnable\n          nodeLimit\n          hitRate\n          evicts\n        }\n      }\n    }\n  "]))),queryMetaList:(0,O.ZP)(m||(m=(0,j.Z)(["\n    query {\n      clusterView {\n        name #cluster\n        metaNodes {\n          addr # serverIP\n          status # status\n          iD\n          toMetaNode {\n            zoneName # idc\n            metaPartitionCount\n            used\n            total\n            ratio\n            reportTime\n            isActive\n          }\n        }\n      }\n    }\n  "]))),queryDataList:(0,O.ZP)(g||(g=(0,j.Z)(["\n    query {\n      clusterView {\n        name #cluster\n        dataNodes {\n          addr # serverIP\n          status # status\n          iD\n          toDataNode {\n            zoneName # idc\n            dataPartitionCount\n            used\n            total\n            usageRatio\n            reportTime\n            isActive\n          }\n        }\n      }\n    }\n  "]))),updateFlashNode:(0,O.ZP)(p||(p=(0,j.Z)(["\n    mutation updateFlashNode($cluster: String, $addr: String, $isEnable: bool) {\n      updateFlashNode(cluster: $cluster, addr: $addr, isEnable: $isEnable)\n    }\n  "]))),setPingSortFlashNode:(0,O.ZP)(h||(h=(0,j.Z)(["\n    mutation setPingSortFlashNode(\n      $cluster: String\n      $addr: String\n      $state: bool\n    ) {\n      setPingSortFlashNode(cluster: $cluster, addr: $addr, state: $state)\n    }\n  "]))),setStackReadFlashNode:(0,O.ZP)(S||(S=(0,j.Z)(["\n    mutation setStackReadFlashNode(\n      $cluster: String\n      $addr: String\n      $state: bool\n    ) {\n      setStackReadFlashNode(cluster: $cluster, addr: $addr, state: $state)\n    }\n  "]))),setTimeoutFlashNode:(0,O.ZP)(v||(v=(0,j.Z)(["\n    mutation setTimeoutFlashNode(\n      $cluster: String\n      $addr: String\n      $timeoutMs: int\n    ) {\n      setTimeoutFlashNode(cluster: $cluster, addr: $addr, timeoutMs: $timeoutMs)\n    }\n  "]))),evictCacheFlashNode:(0,O.ZP)(f||(f=(0,j.Z)(["\n    mutation evictCacheFlashNode(\n      $cluster: String\n      $addr: String\n      $level: int\n      $volume: String\n      $inode: int\n    ) {\n      evictCacheFlashNode(\n        cluster: $cluster\n        addr: $addr\n        level: $level\n        volume: $volume\n        inode: $inode\n      )\n    }\n  "]))),decommissionMetaNode:(0,O.ZP)(D||(D=(0,j.Z)(["\n    mutation decommissionMetaNode($cluster: String, $addr: String) {\n      decommissionMetaNode(cluster: $cluster, addr: $addr) {\n        code\n        message\n      }\n    }\n  "]))),decommissionFlashNode:(0,O.ZP)(P||(P=(0,j.Z)(["\n    mutation decommissionFlashNode($cluster: String, $addr: String) {\n      decommissionFlashNode(cluster: $cluster, addr: $addr) {\n        code\n        message\n      }\n    }\n  "]))),decommissionDataNode:(0,O.ZP)(N||(N=(0,j.Z)(["\n    mutation decommissionDataNode($cluster: String, $addr: String) {\n      decommissionDataNode(cluster: $cluster, addr: $addr) {\n        code\n        message\n      }\n    }\n  "]))),decommissionDisk:(0,O.ZP)(Z||(Z=(0,j.Z)(["\n    mutation decommissionDisk(\n      $cluster: String\n      $addr: String\n      $diskPath: String\n    ) {\n      decommissionDisk(cluster: $cluster, addr: $addr, diskPath: $diskPath) {\n        code\n        message\n      }\n    }\n  "]))),decommissionMetaPartition:(0,O.ZP)(y||(y=(0,j.Z)(["\n    mutation decommissionMetaPartition(\n      $cluster: String\n      $addr: String\n      $volName: String\n      $destAddr: String\n      $iD: int32\n    ) {\n      decommissionMetaPartition(\n        cluster: $cluster\n        addr: $addr\n        volName: $volName\n        destAddr: $destAddr\n        iD: $iD\n      ) {\n        code\n        message\n      }\n    }\n  "]))),decommissionDataPartition:(0,O.ZP)(L||(L=(0,j.Z)(["\n    mutation decommissionDataPartition(\n      $cluster: String\n      $addr: String\n      $volName: String\n      $destAddr: String\n      $iD: int32\n    ) {\n      decommissionDataPartition(\n        cluster: $cluster\n        addr: $addr\n        volName: $volName\n        destAddr: $destAddr\n        iD: $iD\n      ) {\n        code\n        message\n      }\n    }\n  "]))),promoteMetaLearner:(0,O.ZP)(b||(b=(0,j.Z)(["\n    mutation promoteMetaLearner($cluster: String, $addr: String, $iD: int32) {\n      promoteMetaLearner(cluster: $cluster, addr: $addr, iD: $iD) {\n        code\n        message\n      }\n    }\n  "]))),deleteMetaReplica:(0,O.ZP)(x||(x=(0,j.Z)(["\n    mutation deleteMetaReplica($cluster: String, $addr: String, $iD: int32) {\n      deleteMetaReplica(cluster: $cluster, addr: $addr, iD: $iD) {\n        code\n        message\n      }\n    }\n  "]))),deleteDataReplica:(0,O.ZP)(M||(M=(0,j.Z)(["\n    mutation deleteDataReplica($cluster: String, $addr: String, $iD: int32) {\n      deleteDataReplica(cluster: $cluster, addr: $addr, iD: $iD) {\n        code\n        message\n      }\n    }\n  "]))),promoteDataLearner:(0,O.ZP)(C||(C=(0,j.Z)(["\n    mutation promoteDataLearner($cluster: String, $addr: String, $iD: int32) {\n      promoteDataLearner(cluster: $cluster, addr: $addr, iD: $iD) {\n        code\n        message\n      }\n    }\n  "]))),addMetaReplica:(0,O.ZP)(z||(z=(0,j.Z)(["\n    mutation addMetaReplica(\n      $cluster: String\n      $addr: String\n      $iD: int32\n      $storeMode: int32\n    ) {\n      addMetaReplica(\n        cluster: $cluster\n        addr: $addr\n        iD: $iD\n        storeMode: $storeMode\n      ) {\n        code\n        message\n      }\n    }\n  "]))),addDataReplica:(0,O.ZP)(A||(A=(0,j.Z)(["\n    mutation addDataReplica(\n      $cluster: String\n      $addr: String\n      $iD: int32\n      $replicaType: int32\n    ) {\n      addDataReplica(\n        cluster: $cluster\n        addr: $addr\n        iD: $iD\n        replicaType: $replicaType\n      ) {\n        code\n        message\n      }\n    }\n  "]))),addMetaLearner:(0,O.ZP)(F||(F=(0,j.Z)(["\n    mutation addMetaLearner(\n      $cluster: String\n      $addr: String\n      $iD: int32\n      $storeMode: int32\n      $autoPromote: bool\n      $threshold: int32\n    ) {\n      addMetaLearner(\n        cluster: $cluster\n        addr: $addr\n        iD: $iD\n        storeMode: $storeMode\n        autoPromote: $autoPromote\n        threshold: $threshold\n      ) {\n        code\n        message\n      }\n    }\n  "]))),addDataLearner:(0,O.ZP)(R||(R=(0,j.Z)(["\n    mutation addDataLearner(\n      $cluster: String\n      $addr: String\n      $iD: int32\n      $storeMode: int32\n      $autoPromote: bool\n      $threshold: int32\n    ) {\n      addDataLearner(\n        cluster: $cluster\n        addr: $addr\n        iD: $iD\n        storeMode: $storeMode\n        autoPromote: $autoPromote\n        threshold: $threshold\n      ) {\n        code\n        message\n      }\n    }\n  "]))),reloadMetaPartition:(0,O.ZP)(E||(E=(0,j.Z)(["\n    mutation reloadMetaPartition(\n      $cluster: String\n      $addr: String\n      $iD: int32\n      $volName: String\n    ) {\n      reloadMetaPartition(\n        cluster: $cluster\n        addr: $addr\n        iD: $iD\n        volName: $volName\n      ) {\n        code\n        message\n      }\n    }\n  "]))),reloadDataPartition:(0,O.ZP)(T||(T=(0,j.Z)(["\n    mutation reloadDataPartition(\n      $cluster: String\n      $addr: String\n      $iD: int32\n      $volName: String\n    ) {\n      reloadDataPartition(\n        cluster: $cluster\n        addr: $addr\n        iD: $iD\n        volName: $volName\n      ) {\n        code\n        message\n      }\n    }\n  "]))),resetMetaPartition:(0,O.ZP)(q||(q=(0,j.Z)(["\n    mutation resetMetaPartition($cluster: String, $addrs: String, $iD: int32) {\n      resetMetaPartition(cluster: $cluster, addrs: $addrs, iD: $iD) {\n        code\n        message\n      }\n    }\n  "]))),resetDataPartition:(0,O.ZP)(k||(k=(0,j.Z)(["\n    mutation resetDataPartition($cluster: String, $addrs: String, $iD: int32) {\n      resetDataPartition(cluster: $cluster, addrs: $addrs, iD: $iD) {\n        code\n        message\n      }\n    }\n  "]))),dataPartitionList:(0,O.ZP)(G||(G=(0,j.Z)(["\n    query dataPartitionList(\n      $cluster: String\n      $addr: String\n      $iD: int32\n      $page: int32\n      $pageSize: int32\n    ) {\n      dataPartitionList(\n        cluster: $cluster\n        addr: $addr\n        iD: $iD\n        page: $page\n        pageSize: $pageSize\n      ) {\n        total\n        data {\n          partitionID\n          replicas {\n            addr\n            status\n            zone\n            isLeader\n            isLearner\n            fileCount\n            total\n            needCompare\n            used\n            mType\n            diskPath\n          }\n          volName\n          extentCount\n          inodeCount\n          maxExistIno\n          status\n          isRecover\n          createTime\n          lastLoadTime\n        }\n      }\n    }\n  "]))),metaPartitionList:(0,O.ZP)(w||(w=(0,j.Z)(["\n    query metaPartitionList(\n      $cluster: String\n      $addr: String\n      $iD: int32\n      $page: int32\n      $pageSize: int32\n    ) {\n      metaPartitionList(\n        cluster: $cluster\n        addr: $addr\n        iD: $iD\n        page: $page\n        pageSize: $pageSize\n      ) {\n        total\n        data {\n          partitionID\n          replicas {\n            addr\n            status\n            isLeader\n            isLearner\n            storeMode\n            isRecover\n            applyId\n            reportTime\n          }\n          volName\n          start\n          end\n          inodeCount\n          dentryCount\n          maxExistIno\n          status\n          isRecover\n          createTime\n          lastLoadTime\n        }\n      }\n    }\n  "]))),dataNodeGet:(0,O.ZP)(I||(I=(0,j.Z)(["\n    query DataNodeGet($cluster: String, $addr: String) {\n      dataNodeGet(cluster: $cluster, addr: $addr) {\n        dataPartitionReports {\n          diskPath\n          extentCount\n          isLeader\n          needCompare\n          partitionID\n          partitionStatus\n          total\n          used\n          volName\n        }\n      }\n    }\n  "]))),metaNodeGet:(0,O.ZP)(_||(_=(0,j.Z)(["\n    query MetaNodeGet($cluster: String, $addr: String) {\n      metaNodeGet(cluster: $cluster, addr: $addr) {\n        metaPartitionInfos {\n          end\n          isLeader\n          maxInodeID\n          partitionID\n          start\n          status\n          volName\n        }\n      }\n    }\n  "]))),queryServerList:(0,O.ZP)(V||(V=(0,j.Z)(["\n    query {\n      clusterView {\n        name #cluster\n        dataNodes {\n          addr # serverIP\n          status # status\n          iD\n          toDataNode {\n            zoneName # idc\n            dataPartitionCount\n            used\n            total\n            usageRatio\n            reportTime\n          }\n        }\n      }\n    }\n  "])))};t.Z=B},91672:function(n,t,e){e.r(t),e.d(t,{default:function(){return c}});e(34284);var a=function(){var n=this,t=n._self._c;return t("div",{staticClass:"cluster servers"},[n.summary?t("div",{staticClass:"server-title"},[t("span",[n._v(n._s(n.$t("chubaoFS.servers.Cluster"))+": "+n._s(n.summary.name)),t("b",[n._v(n._s(n.$t("chubaoFS.servers.TotalVolume"))+" :\n        "+n._s(n.summary.volumeCount))])]),n._v(" "),t("el-button",{staticClass:"ml50",attrs:{type:"primary"},on:{click:n.goServerList}},[n._v(n._s(n.$t("chubaoFS.servers.ServerList")))])],1):n._e(),n._v(" "),t("div",{staticClass:"server-tree"},[t("div",{staticClass:"text-center"},[t("vue2-org-tree",{attrs:{name:"test",data:n.data,horizontal:n.horizontal,collapsable:n.collapsable,"label-class-name":n.labelClassName,"render-content":n.renderContent},on:{"on-expand":n.onExpand,"on-node-click":n.onNodeClick}})],1),n._v(" "),t("div",{staticClass:"photo"})])])},r=[],i=e(47312),d=(e(60228),e(47522),e(70560),e(73586)),s={name:"Server",data:function(){return{summary:null,data:{id:0,label:"Cluster_Baud Storage",children:[{id:1,label:"Master",children:[]},{id:2,label:"MataNode",children:[]},{id:3,label:"DataNode",children:[]}]},dataPort:9500,metaPort:9500,masterPort:9500,horizontal:!0,collapsable:!0,expandAll:!0,labelClassName:"bg-white"}},methods:{setNum:function(){for(var n=document.getElementsByClassName("org-tree-node-label-inner bg-white"),t=0;t<n.length;t++){var e=null;switch(n[t].innerText){case"Master":e=0;break;case"MataNode":e=1;break;case"DataNode":e=2;break;default:}if(null!==e){var a=this.data.children[e].children.length,r=document.createElement("i");r.classList.add("server-num"),r.innerText=a,n[t].appendChild(r)}}},renderContent:function(n,t){var e=this;return setTimeout((function(){e.setNum()}),20),t.label},onExpand:function(n,t){"expand"in t?(t.expand=!t.expand,!t.expand&&t.children&&this.collapse(t.children)):this.$set(t,"expand",!0)},onNodeClick:function(n,t){if(null==t.url)return!1;window.open(t.url)},collapse:function(n){var t=this;n.forEach((function(n){n.expand&&(n.expand=!1),n.children&&t.collapse(n.children)}))},expandChange:function(){this.toggleExpand(this.data,this.expandAll)},toggleExpand:function(n,t){var e=this;Array.isArray(n)?n.forEach((function(n){e.$set(n,"expand",t),n.children&&e.toggleExpand(n.children,t)})):(this.$set(n,"expand",t),n.children&&e.toggleExpand(n.children,t))},goServerList:function(){this.$router.push({name:"serverList"})},dataProcessing:function(n){var t,e=[],a=(0,i.Z)(n);try{for(a.s();!(t=a.n()).done;){var r=t.value,d={id:r,label:r.addr?r.addr:r};e.push(d)}}catch(s){a.e(s)}finally{a.f()}return e},queryExpandAll:function(){var n=this,t=this,e={num:1e4};this.apollo.query(this.url.consoleCluster,d.Z.queryExpandAll,e).then((function(e){e&&(t.summary=e.data.clusterView,t.data.children[0].children=n.dataProcessing(e.data.masterList),t.data.children[1].children=n.dataProcessing(e.data.metaNodeList),t.data.children[2].children=n.dataProcessing(e.data.dataNodeList)),n.expandChange(),setTimeout((function(){t.setNum()}),20)}))}},mounted:function(){this.queryExpandAll()}},o=s,l=e(1001),u=(0,l.Z)(o,a,r,!1,null,"d8bd7352",null),c=u.exports},21055:function(n,t,e){var a=e(54071),r=e(22615),i=e(90690),d=e(71228),s=e(93292),o=e(19429),l=e(6310),u=e(76522),c=e(5185),$=e(91664),m=Array;n.exports=function(n){var t=i(n),e=o(this),g=arguments.length,p=g>1?arguments[1]:void 0,h=void 0!==p;h&&(p=a(p,g>2?arguments[2]:void 0));var S,v,f,D,P,N,Z=$(t),y=0;if(!Z||this===m&&s(Z))for(S=l(t),v=e?new this(S):m(S);S>y;y++)N=h?p(t[y],y):t[y],u(v,y,N);else for(D=c(t,Z),P=D.next,v=e?new this:[];!(f=r(P,D)).done;y++)N=h?d(D,p,[f.value,y],!0):f.value,u(v,y,N);return v.length=y,v}},71228:function(n,t,e){var a=e(85027),r=e(72125);n.exports=function(n,t,e,i){try{return i?t(a(e)[0],e[1]):t(e)}catch(d){r(n,"throw",d)}}},63477:function(n,t,e){var a=e(22615),r=e(36812),i=e(23622),d=e(69633),s=RegExp.prototype;n.exports=function(n){var t=n.flags;return void 0!==t||"flags"in s||r(n,"flags")||!i(s,n)?t:a(d,n)}},77049:function(n,t,e){var a=e(79989),r=e(21055),i=e(86431),d=!i((function(n){Array.from(n)}));a({target:"Array",stat:!0,forced:d},{from:r})},7409:function(n,t,e){e(64043);var a=e(79989),r=e(22615),i=e(69985),d=e(85027),s=e(34327),o=function(){var n=!1,t=/[ac]/;return t.exec=function(){return n=!0,/./.exec.apply(this,arguments)},!0===t.test("abc")&&n}(),l=/./.test;a({target:"RegExp",proto:!0,forced:!o},{test:function(n){var t=d(this),e=s(n),a=t.exec;if(!i(a))return r(l,t,e);var o=r(a,t,e);return null!==o&&(d(o),!0)}})},12826:function(n,t,e){var a=e(41236).PROPER,r=e(11880),i=e(85027),d=e(34327),s=e(3689),o=e(63477),l="toString",u=RegExp.prototype,c=u[l],$=s((function(){return"/a/b"!==c.call({source:"a",flags:"b"})})),m=a&&c.name!==l;($||m)&&r(RegExp.prototype,l,(function(){var n=i(this),t=d(n.source),e=d(o(n));return"/"+t+"/"+e}),{unsafe:!0})},82054:function(n,t,e){function a(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,a=new Array(t);e<t;e++)a[e]=n[e];return a}e.d(t,{Z:function(){return a}})},47312:function(n,t,e){e.d(t,{Z:function(){return r}});e(59749),e(86544),e(60228),e(84254),e(21694),e(76265),e(21057);var a=e(55642);function r(n,t){var e="undefined"!==typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(!e){if(Array.isArray(n)||(e=(0,a.Z)(n))||t&&n&&"number"===typeof n.length){e&&(n=e);var r=0,i=function(){};return{s:i,n:function(){return r>=n.length?{done:!0}:{done:!1,value:n[r++]}},e:function(n){throw n},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var d,s=!0,o=!1;return{s:function(){e=e.call(n)},n:function(){var n=e.next();return s=n.done,n},e:function(n){o=!0,d=n},f:function(){try{s||null==e["return"]||e["return"]()}finally{if(o)throw d}}}}},55642:function(n,t,e){e.d(t,{Z:function(){return r}});e(89730),e(60228),e(12826),e(34284),e(77049),e(21694),e(64043),e(7409);var a=e(82054);function r(n,t){if(n){if("string"===typeof n)return(0,a.Z)(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);return"Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e?Array.from(n):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?(0,a.Z)(n,t):void 0}}}}]);