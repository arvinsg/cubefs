"use strict";(self["webpackJsonp_cfs-console"]=self["webpackJsonp_cfs-console"]||[]).push([[502],{73586:function(t,n,e){var a,r,i,s,o,d,l,u,c,$,m,p,g,S,h,D,v,P,N,Z,b,L,f,F,z,M,C,y,R,_,G,I,T,q,x,k,A,w,E,V,W=e(2106),U=e(4969),O={queryExpandAll:(0,U.ZP)(a||(a=(0,W.Z)(["\n    query {\n      clusterView {\n        name\n        volumeCount\n      }\n      dataNodeList {\n        addr\n      }\n      metaNodeList {\n        addr\n      }\n      masterList {\n        addr\n      }\n    }\n  "]))),flashGroupList:(0,U.ZP)(r||(r=(0,W.Z)(["\n    query flashGroupList($cluster: String, $page: int32, $pageSize: int32) {\n      flashGroupList(cluster: $cluster, page: $page, pageSize: $pageSize) {\n        total\n        data {\n          iD\n          status\n          flashNodeCount\n        }\n      }\n    }\n  "]))),getFlashGroup:(0,U.ZP)(i||(i=(0,W.Z)(["\n    query getFlashGroup($cluster: String, $iD: int32) {\n      getFlashGroup(cluster: $cluster, iD: $iD) {\n        host\n        zone {\n          zoneName\n          nodeNumber\n        }\n      }\n    }\n  "]))),createFlashGroup:(0,U.ZP)(s||(s=(0,W.Z)(["\n    mutation createFlashGroup($cluster: String) {\n      setPingSortFlashNode(cluster: $cluster) {\n        iD\n      }\n    }\n  "]))),updateFlashGroup:(0,U.ZP)(o||(o=(0,W.Z)(["\n    mutation updateFlashGroup(\n      $cluster: String\n      $iD: int32\n      $isActive: bool\n      $isAddNode: bool\n      $level: int\n      $addr: String\n      $zone: String\n      $count: int\n    ) {\n      updateFlashGroup(\n        cluster: $cluster\n        iD: $iD\n        isActive: $isActive\n        isAddNode: $isAddNode\n        level: $level\n        addr: $addr\n        zone: $zone\n        count: $count\n      )\n    }\n  "]))),removeFlashGroup:(0,U.ZP)(d||(d=(0,W.Z)(["\n    mutation removeFlashGroup($cluster: String, $iD: int32) {\n      removeFlashGroup(cluster: $cluster, iD: $iD)\n    }\n  "]))),masterList:(0,U.ZP)(l||(l=(0,W.Z)(["\n    query masterList($cluster: String, $page: int32, $pageSize: int32) {\n      masterList(cluster: $cluster, page: $page, pageSize: $pageSize) {\n        total\n        data {\n          addr\n          isLeader\n        }\n      }\n    }\n  "]))),metaNodeList:(0,U.ZP)(u||(u=(0,W.Z)(["\n    query metaNodeList(\n      $cluster: String\n      $addr: String\n      $page: int32\n      $pageSize: int32\n    ) {\n      metaNodeList(\n        cluster: $cluster\n        addr: $addr\n        page: $page\n        pageSize: $pageSize\n      ) {\n        total\n        data {\n          iD\n          addr\n          zoneName\n          isActive\n          isWritable\n          total\n          available\n          used\n          usageRatio\n          partitionCount\n          reportTime\n        }\n      }\n    }\n  "]))),dataNodeList:(0,U.ZP)(c||(c=(0,W.Z)(["\n    query dataNodeList(\n      $cluster: String\n      $addr: String\n      $page: int32\n      $pageSize: int32\n    ) {\n      dataNodeList(\n        cluster: $cluster\n        addr: $addr\n        page: $page\n        pageSize: $pageSize\n      ) {\n        total\n        data {\n          iD\n          addr\n          zoneName\n          isActive\n          isWritable\n          total\n          available\n          disk\n          used\n          usageRatio\n          partitionCount\n          reportTime\n        }\n      }\n    }\n  "]))),flashNodeList:(0,U.ZP)($||($=(0,W.Z)(["\n    query flashNodeList(\n      $cluster: String\n      $addr: String\n      $fgID: int\n      $page: int32\n      $pageSize: int32\n    ) {\n      flashNodeList(\n        cluster: $cluster\n        addr: $addr\n        fgID: $fgID\n        page: $page\n        pageSize: $pageSize\n      ) {\n        total\n        data {\n          iD\n          addr\n          zoneName\n          isActive\n          reportTime\n          flashGroupID\n          isEnable\n          nodeLimit\n          hitRate\n          evicts\n        }\n      }\n    }\n  "]))),queryMetaList:(0,U.ZP)(m||(m=(0,W.Z)(["\n    query {\n      clusterView {\n        name #cluster\n        metaNodes {\n          addr # serverIP\n          status # status\n          iD\n          toMetaNode {\n            zoneName # idc\n            metaPartitionCount\n            used\n            total\n            ratio\n            reportTime\n            isActive\n          }\n        }\n      }\n    }\n  "]))),queryDataList:(0,U.ZP)(p||(p=(0,W.Z)(["\n    query {\n      clusterView {\n        name #cluster\n        dataNodes {\n          addr # serverIP\n          status # status\n          iD\n          toDataNode {\n            zoneName # idc\n            dataPartitionCount\n            used\n            total\n            usageRatio\n            reportTime\n            isActive\n          }\n        }\n      }\n    }\n  "]))),updateFlashNode:(0,U.ZP)(g||(g=(0,W.Z)(["\n    mutation updateFlashNode($cluster: String, $addr: String, $isEnable: bool) {\n      updateFlashNode(cluster: $cluster, addr: $addr, isEnable: $isEnable)\n    }\n  "]))),setPingSortFlashNode:(0,U.ZP)(S||(S=(0,W.Z)(["\n    mutation setPingSortFlashNode(\n      $cluster: String\n      $addr: String\n      $state: bool\n    ) {\n      setPingSortFlashNode(cluster: $cluster, addr: $addr, state: $state)\n    }\n  "]))),setStackReadFlashNode:(0,U.ZP)(h||(h=(0,W.Z)(["\n    mutation setStackReadFlashNode(\n      $cluster: String\n      $addr: String\n      $state: bool\n    ) {\n      setStackReadFlashNode(cluster: $cluster, addr: $addr, state: $state)\n    }\n  "]))),setTimeoutFlashNode:(0,U.ZP)(D||(D=(0,W.Z)(["\n    mutation setTimeoutFlashNode(\n      $cluster: String\n      $addr: String\n      $timeoutMs: int\n    ) {\n      setTimeoutFlashNode(cluster: $cluster, addr: $addr, timeoutMs: $timeoutMs)\n    }\n  "]))),evictCacheFlashNode:(0,U.ZP)(v||(v=(0,W.Z)(["\n    mutation evictCacheFlashNode(\n      $cluster: String\n      $addr: String\n      $level: int\n      $volume: String\n      $inode: int\n    ) {\n      evictCacheFlashNode(\n        cluster: $cluster\n        addr: $addr\n        level: $level\n        volume: $volume\n        inode: $inode\n      )\n    }\n  "]))),decommissionMetaNode:(0,U.ZP)(P||(P=(0,W.Z)(["\n    mutation decommissionMetaNode($cluster: String, $addr: String) {\n      decommissionMetaNode(cluster: $cluster, addr: $addr) {\n        code\n        message\n      }\n    }\n  "]))),decommissionFlashNode:(0,U.ZP)(N||(N=(0,W.Z)(["\n    mutation decommissionFlashNode($cluster: String, $addr: String) {\n      decommissionFlashNode(cluster: $cluster, addr: $addr) {\n        code\n        message\n      }\n    }\n  "]))),decommissionDataNode:(0,U.ZP)(Z||(Z=(0,W.Z)(["\n    mutation decommissionDataNode($cluster: String, $addr: String) {\n      decommissionDataNode(cluster: $cluster, addr: $addr) {\n        code\n        message\n      }\n    }\n  "]))),decommissionDisk:(0,U.ZP)(b||(b=(0,W.Z)(["\n    mutation decommissionDisk(\n      $cluster: String\n      $addr: String\n      $diskPath: String\n    ) {\n      decommissionDisk(cluster: $cluster, addr: $addr, diskPath: $diskPath) {\n        code\n        message\n      }\n    }\n  "]))),decommissionMetaPartition:(0,U.ZP)(L||(L=(0,W.Z)(["\n    mutation decommissionMetaPartition(\n      $cluster: String\n      $addr: String\n      $volName: String\n      $destAddr: String\n      $iD: int32\n    ) {\n      decommissionMetaPartition(\n        cluster: $cluster\n        addr: $addr\n        volName: $volName\n        destAddr: $destAddr\n        iD: $iD\n      ) {\n        code\n        message\n      }\n    }\n  "]))),decommissionDataPartition:(0,U.ZP)(f||(f=(0,W.Z)(["\n    mutation decommissionDataPartition(\n      $cluster: String\n      $addr: String\n      $volName: String\n      $destAddr: String\n      $iD: int32\n    ) {\n      decommissionDataPartition(\n        cluster: $cluster\n        addr: $addr\n        volName: $volName\n        destAddr: $destAddr\n        iD: $iD\n      ) {\n        code\n        message\n      }\n    }\n  "]))),promoteMetaLearner:(0,U.ZP)(F||(F=(0,W.Z)(["\n    mutation promoteMetaLearner($cluster: String, $addr: String, $iD: int32) {\n      promoteMetaLearner(cluster: $cluster, addr: $addr, iD: $iD) {\n        code\n        message\n      }\n    }\n  "]))),deleteMetaReplica:(0,U.ZP)(z||(z=(0,W.Z)(["\n    mutation deleteMetaReplica($cluster: String, $addr: String, $iD: int32) {\n      deleteMetaReplica(cluster: $cluster, addr: $addr, iD: $iD) {\n        code\n        message\n      }\n    }\n  "]))),deleteDataReplica:(0,U.ZP)(M||(M=(0,W.Z)(["\n    mutation deleteDataReplica($cluster: String, $addr: String, $iD: int32) {\n      deleteDataReplica(cluster: $cluster, addr: $addr, iD: $iD) {\n        code\n        message\n      }\n    }\n  "]))),promoteDataLearner:(0,U.ZP)(C||(C=(0,W.Z)(["\n    mutation promoteDataLearner($cluster: String, $addr: String, $iD: int32) {\n      promoteDataLearner(cluster: $cluster, addr: $addr, iD: $iD) {\n        code\n        message\n      }\n    }\n  "]))),addMetaReplica:(0,U.ZP)(y||(y=(0,W.Z)(["\n    mutation addMetaReplica(\n      $cluster: String\n      $addr: String\n      $iD: int32\n      $storeMode: int32\n    ) {\n      addMetaReplica(\n        cluster: $cluster\n        addr: $addr\n        iD: $iD\n        storeMode: $storeMode\n      ) {\n        code\n        message\n      }\n    }\n  "]))),addDataReplica:(0,U.ZP)(R||(R=(0,W.Z)(["\n    mutation addDataReplica(\n      $cluster: String\n      $addr: String\n      $iD: int32\n      $replicaType: int32\n    ) {\n      addDataReplica(\n        cluster: $cluster\n        addr: $addr\n        iD: $iD\n        replicaType: $replicaType\n      ) {\n        code\n        message\n      }\n    }\n  "]))),addMetaLearner:(0,U.ZP)(_||(_=(0,W.Z)(["\n    mutation addMetaLearner(\n      $cluster: String\n      $addr: String\n      $iD: int32\n      $storeMode: int32\n      $autoPromote: bool\n      $threshold: int32\n    ) {\n      addMetaLearner(\n        cluster: $cluster\n        addr: $addr\n        iD: $iD\n        storeMode: $storeMode\n        autoPromote: $autoPromote\n        threshold: $threshold\n      ) {\n        code\n        message\n      }\n    }\n  "]))),addDataLearner:(0,U.ZP)(G||(G=(0,W.Z)(["\n    mutation addDataLearner(\n      $cluster: String\n      $addr: String\n      $iD: int32\n      $storeMode: int32\n      $autoPromote: bool\n      $threshold: int32\n    ) {\n      addDataLearner(\n        cluster: $cluster\n        addr: $addr\n        iD: $iD\n        storeMode: $storeMode\n        autoPromote: $autoPromote\n        threshold: $threshold\n      ) {\n        code\n        message\n      }\n    }\n  "]))),reloadMetaPartition:(0,U.ZP)(I||(I=(0,W.Z)(["\n    mutation reloadMetaPartition(\n      $cluster: String\n      $addr: String\n      $iD: int32\n      $volName: String\n    ) {\n      reloadMetaPartition(\n        cluster: $cluster\n        addr: $addr\n        iD: $iD\n        volName: $volName\n      ) {\n        code\n        message\n      }\n    }\n  "]))),reloadDataPartition:(0,U.ZP)(T||(T=(0,W.Z)(["\n    mutation reloadDataPartition(\n      $cluster: String\n      $addr: String\n      $iD: int32\n      $volName: String\n    ) {\n      reloadDataPartition(\n        cluster: $cluster\n        addr: $addr\n        iD: $iD\n        volName: $volName\n      ) {\n        code\n        message\n      }\n    }\n  "]))),resetMetaPartition:(0,U.ZP)(q||(q=(0,W.Z)(["\n    mutation resetMetaPartition($cluster: String, $addrs: String, $iD: int32) {\n      resetMetaPartition(cluster: $cluster, addrs: $addrs, iD: $iD) {\n        code\n        message\n      }\n    }\n  "]))),resetDataPartition:(0,U.ZP)(x||(x=(0,W.Z)(["\n    mutation resetDataPartition($cluster: String, $addrs: String, $iD: int32) {\n      resetDataPartition(cluster: $cluster, addrs: $addrs, iD: $iD) {\n        code\n        message\n      }\n    }\n  "]))),dataPartitionList:(0,U.ZP)(k||(k=(0,W.Z)(["\n    query dataPartitionList(\n      $cluster: String\n      $addr: String\n      $iD: int32\n      $page: int32\n      $pageSize: int32\n    ) {\n      dataPartitionList(\n        cluster: $cluster\n        addr: $addr\n        iD: $iD\n        page: $page\n        pageSize: $pageSize\n      ) {\n        total\n        data {\n          partitionID\n          replicas {\n            addr\n            status\n            zone\n            isLeader\n            isLearner\n            fileCount\n            total\n            needCompare\n            used\n            mType\n            diskPath\n          }\n          volName\n          extentCount\n          inodeCount\n          maxExistIno\n          status\n          isRecover\n          createTime\n          lastLoadTime\n        }\n      }\n    }\n  "]))),metaPartitionList:(0,U.ZP)(A||(A=(0,W.Z)(["\n    query metaPartitionList(\n      $cluster: String\n      $addr: String\n      $iD: int32\n      $page: int32\n      $pageSize: int32\n    ) {\n      metaPartitionList(\n        cluster: $cluster\n        addr: $addr\n        iD: $iD\n        page: $page\n        pageSize: $pageSize\n      ) {\n        total\n        data {\n          partitionID\n          replicas {\n            addr\n            status\n            isLeader\n            isLearner\n            storeMode\n            isRecover\n            applyId\n            reportTime\n          }\n          volName\n          start\n          end\n          inodeCount\n          dentryCount\n          maxExistIno\n          status\n          isRecover\n          createTime\n          lastLoadTime\n        }\n      }\n    }\n  "]))),dataNodeGet:(0,U.ZP)(w||(w=(0,W.Z)(["\n    query DataNodeGet($cluster: String, $addr: String) {\n      dataNodeGet(cluster: $cluster, addr: $addr) {\n        dataPartitionReports {\n          diskPath\n          extentCount\n          isLeader\n          needCompare\n          partitionID\n          partitionStatus\n          total\n          used\n          volName\n        }\n      }\n    }\n  "]))),metaNodeGet:(0,U.ZP)(E||(E=(0,W.Z)(["\n    query MetaNodeGet($cluster: String, $addr: String) {\n      metaNodeGet(cluster: $cluster, addr: $addr) {\n        metaPartitionInfos {\n          end\n          isLeader\n          maxInodeID\n          partitionID\n          start\n          status\n          volName\n        }\n      }\n    }\n  "]))),queryServerList:(0,U.ZP)(V||(V=(0,W.Z)(["\n    query {\n      clusterView {\n        name #cluster\n        dataNodes {\n          addr # serverIP\n          status # status\n          iD\n          toDataNode {\n            zoneName # idc\n            dataPartitionCount\n            used\n            total\n            usageRatio\n            reportTime\n          }\n        }\n      }\n    }\n  "])))};n.Z=O},99502:function(t,n,e){e.r(n),e.d(n,{default:function(){return u}});var a=function(){var t=this,n=t._self._c;return n("div",[n("crumb",{attrs:{crumbInfo:t.crumbInfo}}),t._v(" "),n("div",{staticClass:"cluster alarm"},["data"===t.h3Txt?n("span",[t._v(t._s(t.$t("chubaoFS.servers.Datanode")))]):n("span",[t._v(t._s(t.$t("chubaoFS.servers.Matanode")))]),t._v("\n    "+t._s(t.$t("chubaoFS.servers.PartitionList"))+"\n    "),n("div",{directives:[{name:"loading",rawName:"v-loading",value:t.resData.loading,expression:"resData.loading"}],staticClass:"data-block"},["data"===t.h3Txt?n("el-table",{staticClass:"mt20",staticStyle:{width:"100%"},attrs:{data:t.resData.resLists}},[n("el-table-column",{attrs:{prop:"partitionID",label:t.$t("chubaoFS.servers.PartitionID")}}),t._v(" "),n("el-table-column",{attrs:{prop:"volName",label:t.$t("chubaoFS.servers.Volume")}}),t._v(" "),n("el-table-column",{attrs:{prop:"total",label:t.$t("chubaoFS.servers.Total")}}),t._v(" "),n("el-table-column",{attrs:{prop:"used",label:t.$t("chubaoFS.servers.Used")}}),t._v(" "),n("el-table-column",{attrs:{prop:"status",label:t.$t("chubaoFS.servers.Status")}}),t._v(" "),n("el-table-column",{attrs:{prop:"diskPath",label:t.$t("chubaoFS.servers.DiskPath")}}),t._v(" "),n("el-table-column",{attrs:{prop:"isLeader",label:t.$t("chubaoFS.servers.Leader")},scopedSlots:t._u([{key:"default",fn:function(e){return[n("div",[t._v(t._s(e.row.isLeader))])]}}],null,!1,2025729776)}),t._v(" "),n("el-table-column",{attrs:{prop:"extentCount",label:t.$t("chubaoFS.servers.ExtentCount")}}),t._v(" "),n("el-table-column",{attrs:{prop:"needCompare",label:t.$t("chubaoFS.servers.NeedCompare")},scopedSlots:t._u([{key:"default",fn:function(e){return[n("div",[t._v(t._s(e.row.needCompare))])]}}],null,!1,631425820)})],1):n("el-table",{staticClass:"mt20",staticStyle:{width:"100%"},attrs:{data:t.resData.resLists}},[n("el-table-column",{attrs:{prop:"partitionID",label:t.$t("chubaoFS.servers.PartitionID")}}),t._v(" "),n("el-table-column",{attrs:{prop:"volName",label:t.$t("chubaoFS.servers.Volume")}}),t._v(" "),n("el-table-column",{attrs:{prop:"start",label:t.$t("chubaoFS.servers.Start")}}),t._v(" "),n("el-table-column",{attrs:{prop:"end",label:t.$t("chubaoFS.servers.End")}}),t._v(" "),n("el-table-column",{attrs:{prop:"status",label:t.$t("chubaoFS.servers.Status")}}),t._v(" "),n("el-table-column",{attrs:{prop:"isLeader",label:t.$t("chubaoFS.servers.Leader")},scopedSlots:t._u([{key:"default",fn:function(e){return[n("div",[t._v(t._s(e.row.isLeader))])]}}])})],1),t._v(" "),n("div",{staticClass:"clearfix mt20"},[n("el-pagination",{staticClass:"fr",attrs:{"page-sizes":t.resData.page.pageSizes,"page-size":t.resData.page.pageSize,layout:"sizes, prev, pager, next",total:t.resData.page.totalRecord},on:{"size-change":t.handleSizeChange,"current-change":t.handleCurrentChange}}),t._v(" "),n("span",{staticClass:"fr page-tips pr10"},[t._v(t._s(t.$t("chubaoFS.commonTxt.eachPageShows")))])],1)],1)])],1)},r=[],i=(e(89730),e(60228),e(47522),e(73586)),s={name:"alarm",data:function(){return{resData:{loading:!0,page:{pageSizes:[10,20,30,40],pageNo:1,pageSize:10,totalRecord:0,totalPage:1},resLists:[]},typeVal:"",typeList:["Meta Partition List"],ip:"",h3Txt:""}},computed:{crumbInfo:function(){return this.ip}},methods:{handleSizeChange:function(t){this.resData.page.pageSize=t,this.resData.page.pageNo=1,this.handleCurrentChange(1)},handleCurrentChange:function(t){this.resData.page.pageNo=t;var n=(t-1)*this.resData.page.pageSize,e=t*this.resData.page.pageSize;this.resData.resLists=this.storageLists.slice(n,e)},queryList:function(){var t=this,n=this;n.resData.loading=!0;var e={addr:this.ip},a="data"===this.h3Txt?"dataNodeGet":"metaNodeGet";this.apollo.query(this.url.consoleCluster,i.Z[a],e).then((function(e){if(n.resData.loading=!1,e){var a=e.data;"data"===t.h3Txt?(t.storageLists=a.dataNodeGet.dataPartitionReports,t.resData.page.totalRecord=a.dataNodeGet.dataPartitionReports.length,a.dataNodeGet.dataPartitionReports.forEach((function(t){t.status=1==t.partitionStatus?"ReadOnly":2==t.partitionStatus?"ReadWrite":"Unavailable",console.log(1==t.partitionStatus?"ReadOnly":2==t.partitionStatus?"ReadWrite":"Unavailable")}))):(t.storageLists=a.metaNodeGet.metaPartitionInfos,t.resData.page.totalRecord=a.metaNodeGet.metaPartitionInfos.length,a.metaNodeGet.metaPartitionInfos.forEach((function(t){t.status=1==t.status?"ReadOnly":2==t.status?"ReadWrite":"Unavailable"}))),t.handleCurrentChange(1)}})).catch((function(t){n.resData.loading=!1,console.log(t)}))}},mounted:function(){var t=this.$route.query;this.ip=t.ip,this.h3Txt=t.type,this.queryList()}},o=s,d=e(1001),l=(0,d.Z)(o,a,r,!1,null,"1d1ec48e",null),u=l.exports}}]);